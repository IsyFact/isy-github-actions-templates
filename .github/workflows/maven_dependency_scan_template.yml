name: Dependency Scan Template
on:
  workflow_call:
    inputs:
      jdk-version:
        required: false
        description: 'JDK version'
        type: number
        default: 17
      checkout-lfs:
        required: false
        description: 'Enable Git LFS checkout'
        type: boolean
        default: false
      snyk-organization:
        required: false
        description: 'Snyk Organization ID'
        type: string
      snyk-reference:
        required: true
        description: 'Target reference for Snyk project'
        type: string
      snyk-arguments:
        required: false
        description: "Optional arguments for Snyk CLI"
        type: string
        default: "--maven-aggregate-project"
      perform-scan:
        required: false
        description: 'Perform scanning instead of monitoring'
        type: boolean
        default: false
      severity-threshold:
        required: false
        description: 'Severity threshold for Snyk scan'
        type: string
        default: 'critical'
      scan-dependency-management:
        required: false
        description: 'Scan dependencies in dependencyManagement'
        type: boolean
        default: true
    secrets:
      SNYK_TOKEN:
        required: true
        description: 'Token to authenticate Snyk CLI'

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  Monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: ${{ inputs.checkout-lfs }}

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Setup JDK ${{ inputs.jdk-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: temurin
          cache: maven

      - name: Modify POM file of isyfact-products-bom for scanning dependencyManagement
        if: ${{ inputs.scan-dependency-management }}
        run: |
          POM_FILE="isyfact-products-bom/pom.xml"

          # Check if the POM file exists
          if [ ! -f "$POM_FILE" ]; then
              echo "$POM_FILE not found. No need for scanning dependencyManagement."
              exit 0 
          fi

          echo "$POM_FILE found. Modifying the POM file."

          # Extract dependencies from dependencyManagement
          echo "Extracting dependencies from dependencyManagement..."

          DEPENDENCIES=$(xmllint --xpath "//*[local-name()='dependencyManagement']/*[local-name()='dependencies']/*[local-name()='dependency']" "$POM_FILE" 2>/dev/null)

          if ! [[ "$DEPENDENCIES" ]]; then
              echo "Warning: No dependencies found in dependencyManagement. Skipping modification."
              exit 0
          fi

          # Exclude specific artifactIds
          EXCLUDED_ARTIFACT_IDS=("spring-boot-dependencies")
          for artifactId in "${EXCLUDED_ARTIFACT_IDS[@]}"; do
              DEPENDENCIES=$(echo "$DEPENDENCIES" | sed -n '/<dependency>/,/<\/dependency>/ {
                  H;
                  /<\/dependency>/ {
                      x;
                      /<artifactId>'"$artifactId"'<\/artifactId>/d;
                      p
                  }
              }')
          
          # Extract only the groupId and artifactId tags
          DEPENDENCIES=$(echo "$DEPENDENCIES" | sed -n '
              /<dependency>/,/<\/dependency>/ {
                  /<groupId>/p;
                  /<artifactId>/p;
                  /<dependency>/p;
                  /<\/dependency>/p;
              }')

          # Remove newlines and whitespace between tags
          DEPENDENCIES=$(echo "$DEPENDENCIES" | tr '\n' ' ' | sed 's/>[[:space:]]*</></g')

          # Insert extracted dependencies into the <dependencies> section right after </dependencyManagement>
          echo "Inserting extracted dependencies into the POM file..."
          
          awk -v deps="$DEPENDENCIES" '
              /<\/dependencyManagement>/ {
                  print $0
                  print "<dependencies>"
                  print deps
                  print "</dependencies>"
                  next
              }
              { print $0 }
          ' "$POM_FILE" 
          
          if [[ $? -eq 0 ]]; then
            echo "Dependencies successfully inserted into $POM_FILE"
          else
            echo "Failed to insert dependencies."
            exit 1
          fi

      - name: Run Snyk task
        run: |
          if [ "${{ inputs.perform-scan }}" = "true" ]; then
            snyk test ${{ inputs.snyk-arguments }}
              --severity-threshold=${{ inputs.severity-threshold }} 
              --target-reference=${{ inputs.snyk-reference }}
              --org=${{ inputs.snyk-organization }}
          else
            snyk monitor ${{ inputs.snyk-arguments }} 
              --target-reference=${{ inputs.snyk-reference }} 
              --org=${{ inputs.snyk-organization }}
          fi
