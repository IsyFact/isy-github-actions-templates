name: Trigger Documentation Build Template

on:
  workflow_call:
    inputs:
      log_level:
        description: 'Log severity level for the Antora build (debug, info, warn, error)'
        required: false
        type: string
        default: 'info'
      failure_level:
        description: 'Log failure level for the Antora build (fatal, error, warn, none)'
        required: false
        type: string
        default: 'fatal'
    secrets:
      ANTORA_TRIGGER_TOKEN:
        description: 'GitHub token to trigger the documentation build'
        required: true

jobs:
  TriggerDocsBuild:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger documentation build
        uses: codex-/return-dispatch@v2.0.5
        id: trigger_build
        with:
          token: ${{ secrets.ANTORA_TRIGGER_TOKEN }}
          ref: main
          repo: isyfact.github.io
          owner: IsyFact
          workflow: antora_build.yml
          workflow_inputs: |
            {
              "log_level": "${{ inputs.log_level }}",
              "failure_level": "${{ inputs.failure_level }}"
            }

      - name: Wait for documentation build completion (Run ID - ${{ steps.trigger_build.outputs.run_id }})
        uses: codex-/await-remote-run@v1.12.2
        id: wait_for_completion
        continue-on-error: true
        with:
          token: ${{ secrets.ANTORA_TRIGGER_TOKEN }}
          repo: isyfact.github.io
          owner: IsyFact
          run_id: ${{ steps.trigger_build.outputs.run_id }}
          run_timeout_seconds: 300 # 5 minutes (optional)
          poll_interval_ms: 5000 # 5 seconds (optional)

      - name: Fetch and extract Build Documentation logs
        env:
          GH_TOKEN: ${{ secrets.ANTORA_TRIGGER_TOKEN }}
          OWNER: IsyFact
          REPO: isyfact.github.io
          RUN_ID: ${{ steps.trigger_build.outputs.run_id }}
        run: |
          # Fetch the logs for the given run ID using GitHub CLI
          echo "Fetching logs for run ID: $RUN_ID from repository $OWNER/$REPO"
          
          # Use gh CLI to download the logs
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$OWNER/$REPO/actions/runs/$RUN_ID/logs > logs.zip
  
          # Unzip the logs
          unzip logs.zip -d logs
          
          # Find and print logs for the 'Build Documentation' step
          build_log_file=$(find logs -type f -name "*Build Documentation*")
          
          if [ -z "$build_log_file" ]; then
            echo "Build Documentation logs not found."
          else
            
            echo "Build Documentation logs found: $build_log_file"
            
            echo "Processing logs to remove unwanted sections and timestamps..."
            awk '/Processing JSON logs.../{flag=1} flag' "$build_log_file" | sed 's/^[0-9TZ:\.-]*Z //g' > temp_cleaned_logs.txt
          
            # Display the cleaned logs
            cat temp_cleaned_logs.txt
          
            # Remove ANSI escape codes 
            sed -E 's/\x1b\[[0-9;]*m//g' temp_cleaned_logs.txt > cleaned_logs.txt
          fi

      - name: Format and generate logs markdown
        run: |  
          input_file="cleaned_logs.txt"
          output_file="formatted_logs.md"
          echo "## Build Documentation Logs üìú‚ú®" > "$output_file"
          
          # Variables to track the block state
          in_block=false
          completion_status=""
          
          # Read the cleaned logs line by line
          while IFS= read -r line; do
            case "$line" in
              Source:*)
                # Close previous details block if it's not the first one
                if [ "$in_block" = true ]; then
                  echo -e "</details>\n" >> "$output_file"
                fi
                # Start a new details block for a new source
                echo "<details>" >> "$output_file"
                echo "<summary><strong>‚≠ê $line</strong></summary>" >> "$output_file"
                echo "" >> "$output_file"  # Add a new line for formatting
                in_block=true
                ;;
              INFO:*)
                # Process INFO logs
                message="üü¢ **INFO**"
                # Extract the description and the specific reference separately
                description=$(echo "$line" | cut -d':' -f2 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                reference=$(echo "$line" | cut -d':' -f3- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                ;;
              ERROR:*)
                # Process ERROR logs
                message="üî¥ **ERROR**"
                description=$(echo "$line" | cut -d':' -f2 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                reference=$(echo "$line" | cut -d':' -f3- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                ;;
              WARN:*)
                # Process WARN logs
                message="üü° **WARN**"
                description=$(echo "$line" | cut -d':' -f2 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                reference=$(echo "$line" | cut -d':' -f3- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                ;;
              DEBUG:*)
                # Process DEBUG logs
                message="üîµ **DEBUG**"
                description=$(echo "$line" | cut -d':' -f2 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                reference=$(echo "$line" | cut -d':' -f3- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                ;;
              "Antora documentation build completed successfully.")
                # Set the completion status to success
                completion_status="‚úÖüéâüöÄ Antora documentation build completed successfully. "
                ;;
              "Antora documentation build failed.")
                # Set the completion status to failure without exit code
                completion_status="‚ùåüî•üëÄ Antora documentation build failed. "
                ;;
            esac
          
            # Process log details and file path if a message was set
            if [ -n "$message" ]; then
              # Read the next line to get the file path
              if IFS= read -r next_line; then
                # Extract the file path, removing the "File:" prefix
                file_path=$(echo "$next_line" | sed 's/^  File: //')
                # Append the log entry with bullet point and formatting
                echo "- ${message}: ${description}: \`${reference}\`" >> "$output_file"
                echo "    - _File:_ \`${file_path}\`" >> "$output_file"
              fi
              message=""
            fi
          done < "$input_file"
          
          # Ensure the last details block is closed
          if [ "$in_block" = true ]; then
            echo "</details>" >> "$output_file"
          fi
          
          # Append the completion status at the end
          echo -e "\n${completion_status}" >> "$output_file"

      - name: Comment logs on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@v2.5.0
        with:
          filePath: formatted_logs.md
          comment_tag: antora-logs

      - name: Fail the workflow if Antora build fails
        run: |          
          if grep -q "Antora documentation build failed." cleaned_logs.txt; then
            echo -e "\033[0;31mAntora documentation build failed.\033[0m"
            exit 1
          else
            echo -e "\033[0;32mAntora documentation build completed successfully.\033[0m"
          fi
